<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Variables
hspd = 0;
vspd = 0;
grav = 0.4;
jumpspeed = 9;
movespeed = 4;
facing = p_right;
image_speed = 0.5;
jumping = false;
isIdle = true;
falling = false;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if place_meeting(x , y + 1, obj_wall)
    {
        jumping = false;
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Player Inputs
//Getting input from the player
key_right = keyboard_check(vk_right);
key_left = -keyboard_check(vk_left);
key_jump = keyboard_check_pressed(vk_space);
key_ascend = -keyboard_check(vk_up);
key_desend = keyboard_check(vk_down);
key_shoot = keyboard_check_pressed(vk_shift);

//React to inputs
move = key_left + key_right;
hspd = move * movespeed;
//climb = key_ascend + key_desend

if (vspd &lt; 10)
    {
        vspd += grav;
    }

if (place_meeting(x, y + 1, obj_wall))
    {
        vspd = key_jump * -jumpspeed;
    }

//Horizontal collision
if (place_meeting(x+hspd, y, obj_wall))
    {
        while(!place_meeting(x + sign(hspd), y, obj_wall))
            {
                 x += sign(hspd);
            }
        hspd = 0;
     }   
//Vertical Collision
if (place_meeting(x, y + vspd, obj_wall))
    {
        while(!place_meeting(x, y + sign(vspd), obj_wall))
            {
                 y += sign(vspd);
            }
        vspd = 0;
        jumping = false;
     } 
//Update player facing
if (move = 0)
    {
        isIdle = true
    }
if (move = 1)
    {   
        facing = p_right;
        isIdle = false;
    }
if (move = -1)
    {   
        facing = p_left;
        isIdle = false;
    }
if (key_jump = 1)
    {
        jumping = true;
    }
        
/*Ladders: Currently not functioning, however not breaking the game at this point.
if (!place_meeting(x, y, obj_ladder))
    {
        while(place_meeting(x, y + sign(vspd), obj_ladder))
            {
                vspd = climb * -movespeed;
            }
    }
    */
x += hspd;
y += vspd;

//Shooting

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Drawing sprites

if isIdle = true &amp;&amp; jumping = false
   {   
       draw_sprite(spr_player, image_index, x, y);
   }
if facing = p_right &amp;&amp; jumping = false &amp;&amp; isIdle = false
    {   
        draw_sprite(spr_player_right, image_index++, x, y);
    }
if facing = p_left &amp;&amp; jumping = false &amp;&amp; isIdle = false
    {   
        draw_sprite(spr_player_left, image_index++, x, y);
    }
if facing = p_right &amp;&amp; jumping = true
    {
        draw_sprite(spr_jump_right, 0, x, y);
    }
if facing = p_left &amp;&amp; jumping = true
    {
        draw_sprite(spr_jump_left, 0, x, y);
    }

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Debug Text
draw_text(0, 0, "jumping: " + string(jumping));
draw_text(0, 20, "isIdle: " + string(isIdle));
draw_text(0, 40, "Score: " + string(score));
draw_text(0, 60, "Falling: " +string(falling));
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>16,16</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
